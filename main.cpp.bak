#include <iostream>
#include <pthread.h>
#include <semaphore.h>

void *thread(void *vargp);
volatile int cnt;
sem_t *mutex;
int main(int argc, char **argv) {
    int niters;
    pthread_t tid1, tid2;
    niters = atoi(argv[1]);
    const char *name = "/sem_test";
    printf("unlink: %d\n", sem_unlink(name));
    mutex = sem_open(name, O_CREAT | O_EXCL, S_IRUSR | S_IWUSR, 1);
    if (mutex == SEM_FAILED) {
        printf("err: %s\n", strerror(errno));
    }
    pthread_create(&tid1, NULL, thread, &niters);
    pthread_create(&tid2, NULL, thread, &niters);
    pthread_join(tid1, NULL);
    pthread_join(tid2, NULL);
    sem_close(mutex);
    printf("unlink: %d\n", sem_unlink(name));
    printf("cnt=%d\n", cnt);
    return 0;
}
void *thread(void *vargp) {
    int i, niters = *((int *)vargp);
    for (i = 0; i < niters; i++) {
        sem_wait(mutex);
        cnt++;
        sem_post(mutex);
    }
}